<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on wxianfeng</title>
    <link>https://wxianfeng.github.io/posts/</link>
    <description>Recent content in Posts on wxianfeng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Aug 2020 22:31:15 +0800</lastBuildDate>
    
	<atom:link href="https://wxianfeng.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>按揭贷款要不要改 LPR 浮动利率</title>
      <link>https://wxianfeng.github.io/2020/lpr/</link>
      <pubDate>Thu, 13 Aug 2020 22:31:15 +0800</pubDate>
      
      <guid>https://wxianfeng.github.io/2020/lpr/</guid>
      <description>背景 在 2020 年 8 月底前，所有按揭贷款会默认转化为 LPR 浮动利率，这里很多人会有困惑，之前的贷款利率要不要转 LPR ?
另外注意，银行提供三种方案供用户选择，如下:
 基于人行基准利率浮动 原先的固定利率不变，例如原先的按揭利率是 4.41 基于 LPR  本文主要分析下第 3 种情况，LPR 情况， 供参考
LPR 算法 要不要改 LPR，首先我们得知道 LPR 的计算算法，LPR 计算算法如下:
$$ LPR = LPR\left ( base \right ) + Point $$ $$ Point = P(old) - P(base) $$
LPR: 要计算的 LPR 利率
LPR(base): LPR 基准利率，每月变化 Point: 计算出的 LPR 利率加点，人行的基准利率很少变化，可以认为算出的加点值就是固定的
P(old): 你的按揭贷款原先执行利率
P(base): 最新的人行基准利率，例如 2019.12.31 号是 4.8
举例  原先利率
例如 2016 年做了按揭，贷款月份是 4 月份，当时贷款利率是人行基准利率(当时 4.</description>
    </item>
    
    <item>
      <title>SpringMVC log4j, log4j2 配置</title>
      <link>https://wxianfeng.github.io/2020/springmvc-log4j/</link>
      <pubDate>Sat, 25 Apr 2020 00:11:46 +0800</pubDate>
      
      <guid>https://wxianfeng.github.io/2020/springmvc-log4j/</guid>
      <description>发现网上关于 log4j, log4j2 的配置比较乱。特别是引用的包，参差不齐，本人最近从 log4j 升级到了 log4j2，特此记录，供参考。
 log4j 配置 Maven &amp;lt;slf4j.version&amp;gt;1.7.7&amp;lt;/slf4j.version&amp;gt; &amp;lt;log4j.version&amp;gt;1.2.16&amp;lt;/log4j.version&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-log4j12&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${slf4j.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${slf4j.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${log4j.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; slf4j-log4j12: slf4j 到 log4j 的绑定器
slf4j-api: slf4j 库，日志门面工厂方法
log4j: log4j 实现库
web.xml &amp;lt;!-- log4j --&amp;gt; &amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;log4jConfigLocation&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;/WEB-INF/log4j.properties&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt; log4j.properties log4j.rootLogger = info, fileout, stdout log4j.appender.fileout=org.apache.log4j.FileAppender log4j.appender.fileout.File=${user.home}/logs/app.log log4j.appender.fileout.layout=org.apache.log4j.PatternLayout log4j.appender.fileout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} app [%X{traceId}] %-5p [%t] %c{2}:%L - %m%n log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} app [%X{traceId}] %-5p [%t] %c{2}:%L - %m%n 使用 public class A { private static final Logger logger = LoggerFactory.</description>
    </item>
    
    <item>
      <title>使用 Hugo &#43; Github Pages 搭建静态网站</title>
      <link>https://wxianfeng.github.io/2020/hugo-github-page/</link>
      <pubDate>Wed, 04 Mar 2020 00:44:35 +0800</pubDate>
      
      <guid>https://wxianfeng.github.io/2020/hugo-github-page/</guid>
      <description>缘起 之前有个 Blog，网址为 http://blog.wxianfeng.com ，是在 2010 年基于 Typo(Ruby On Rails) 搭建的，有个后台 admin 写文章，体验非常之不好，Markdown 支持的不好，写作体验也没有本地写起来舒服，一直想换个静态 Blog，本地写，push 到 github 上，利用 2020 新冠肺炎宅在家的时间，搭建了这个 Blog，此刻正在使用 Vscode 本地写这篇文章，体感很棒，哈哈。
静态博客选型 刚开始静态 Blog 选型的时候，调研了下，主要在 Ruby 写的 Jekyll，NodeJS 的 Hexo，和 Golang 的 Hugo 三个中作选择。
最后选择的 Hugo，主要判断依赖为 Hugo 的 star 数最多，其次在 17 年学习过 Golang，一直没用在实际项目中，借此也可熟悉下练练手
Hugo 主题选型 Hugo 还有一大优势就是主题特别多，经过比较筛选，个人想要首页是一个主页型页面，不是直接看到 Post，看到了 KeepIt 这个主题非常简洁美观，直接使用这个主题即可，后面如果自己有新增需求，可以给作者提 issue，或者 Fork 下来进行修改即可
Hugo 搭建步骤 安装 Hugo brew install hugo 我使用的版本 v0.72.0
生成站点 hugo new site /path/to/wxianfeng.github.io 安装主题 cd themes git clone https://github.</description>
    </item>
    
  </channel>
</rss>